import socket
import socketserver
import threading
import time
import os
import json
import struct

path = os.path.abspath('.')
filename = 'a.txt'


###
# this is tcp socket programmer
###
# server
class Temp_Server(socketserver.StreamRequestHandler):

    def handle(self):
        if self.request.recv(20).decode() == 'get_data':
            with open(os.path.join(path, filename), 'r') as f:
                messages = f.readlines()
            message = ''
            for i in messages:
                message = message + i + '\n'
            size = len(message)
            info = {
                'filename': filename,
                'size': size,
            }
            info_pack = struct.pack('100s', json.dumps(info).encode())
            self.request.sendall(info_pack)
            if self.request.recv(10).decode() == 'CONTINUE':
                while size > 1024:
                    self.request.send(message[:1024].encode())
                    message = message[1024:]
                    size = len(message)
                self.request.send(message.encode())


# client
def temp_client():
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        client.connect(('127.0.0.1', 20012))
        client.send('get_data'.encode())
        client_data = client.recv(100)
        client_unpack = struct.unpack('100s', client_data)[0].decode()
        client_info = client_unpack[:client_unpack.index('}') + 1]
        print(client_info)
        client_load = json.loads(client_info)
        client_filename = client_load['filename']
        size = client_load['size']
        client.send('CONTINUE'.encode())
        with open(os.path.join(path, client_filename + '1'), 'w') as f:
            while size > 1024:
                message = client.recv(1024).decode()
                print(message)
                f.write(message)
                size -= 1024
            message = client.recv(size).decode()
            f.write(message)
    finally:
        client.close()

###
# this is udp socket programmer, and you caution that your cannot send bytes too much, witless you will get 'too long bytes'
###
# coding: utf-8

from socketserver import UDPServer as UDP, DatagramRequestHandler as DRH
import socket
import threading
import time
import struct
import os
import json

path = os.path.abspath('.')
file_name = 'a.txt'


class UDPServer(DRH):

    def handle(self):
        read_data = self.rfile.read().decode()
        if read_data == 'i want to get a file!!':
            with open(os.path.join(path, file_name), 'r') as f:
                messages = f.readlines()
            message = ''
            for i in messages:
                message = message + i + '\n'
            size = len(message)
            info = {
                    'filename': file_name,
                    'size': size,
            }
            client_info = struct.pack('100s', json.dumps(info).encode())
            self.wfile.write(client_info)
        if read_data == file_name + 'CONTINUE':
            with open(os.path.join(path, file_name), 'r') as f:
                messages = f.readlines()
            message = ''
            for i in messages:
                message += i + '\n'
            size = len(message)
            num = 0
            while size > num + 1024:
                self.wfile.write(message[num:num + 1024].encode())
                num += 1024
            self.wfile.write(message.encode())


def udp_client():
    client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    client.sendto('i want to get a file!!'.encode(), ('127.0.0.1', 12335))
    client_receive, remote_ip = client.recvfrom(100)
    client_messages = struct.unpack('100s', client_receive)[0].decode()
    client_message = client_messages[:client_messages.index('}') + 1]
    map_data = json.loads(client_message)
    client_file_name = map_data['filename']
    size = map_data['size']
    client.sendto((client_file_name+'CONTINUE').encode(), ('127.0.0.1', 12335))
    with open(os.path.join(path, client_file_name + '1'), 'w') as f:
        data, addr = client.recvfrom(size)
        print(data)
        f.write(data.decode())
    client.close()

###
# this is the main
###
if __name__ == '__main__':
    # tcp socketserver
    socket_server = socketserver.ThreadingTCPServer(('0.0.0.0', 20012), Temp_Server)
    threading.Thread(target=socket_server.serve_forever).start()
    time.sleep(1)
    temp_client()

    #udp socketserver
    server = UDP(('127.0.0.1', 12335), UDPServer)
    threading.Thread(target=server.serve_forever).start()
    time.sleep(1)
    udp_client()
