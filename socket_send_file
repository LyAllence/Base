import socket
import socketserver
import threading
import time
import os
import json

path = os.path.abspath('.')
filename = 'a.txt'


# server
class Temp_Server(socketserver.StreamRequestHandler):

    def handle(self):
        if self.request.recv(20).decode() == 'get_data':
            with open(os.path.join(path, filename), 'r') as f:
                messages = f.readlines()
            message = ''
            for i in messages:
                message = message + i + '\n'
            size = len(message)
            info = {
                'filename': filename,
                'size': size,
            }
            self.request.sendall(json.dumps(info).encode())
            if self.request.recv(10).decode() == 'CONTINUE':
                while size > 1024:
                    self.request.send(message[:1024].encode())
                    message = message[1024:]
                    size = len(message)
                self.request.send(message.encode())


# client
def temp_client():
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        client.connect(('127.0.0.1', 20012))
        client.send('get_data'.encode())
        client_data = client.recv(100).decode()
        data = json.loads(client_data)
        print(data)
        client_filename = data['filename']
        size = data['size']
        client.send('CONTINUE'.encode())
        with open(os.path.join(path, client_filename + '1'), 'w') as f:
            while size > 1024:
                message = client.recv(1024).decode()
                print(message)
                f.write(message)
                size -= 1024
            message = client.recv(size).decode()
            f.write(message)
    finally:
        client.close()


if __name__ == '__main__':
    socket_server = socketserver.ThreadingTCPServer(('0.0.0.0', 20012), Temp_Server)
    threading.Thread(target=socket_server.serve_forever).start()
    time.sleep(1)
    temp_client()
